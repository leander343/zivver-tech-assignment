# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS


name: Deploy to Amazon ECS

# Trigger workflow only if there are changes pushed to path or on manual dispatch
on:
  push:
    branches: [ "master" ]
    paths:
     - "ziv-app/**" 
  workflow_dispatch:
  # Trigger workflow on completion of infrastructure workflow 
  workflow_run:
    workflows: ["Deploy ECS infrastructure"] 
    types:
      - completed
  
    
permissions:
  contents: read

jobs:

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion != 'failure') }}
    env:
     AWS_REGION: ${{ vars.AWS_REGION }}                  
     ECR_REPOSITORY: ${{ vars.REPOSITORY_NAME }}        
     ECS_SERVICE: ${{ vars.SERVICE_NAME }}              
     ECS_CLUSTER: ${{ vars.CLUSTER_NAME }} 
     ECS_TASK_DEFINITION: "task-definition.json" 
     CONTAINER_NAME: "zivvy-app"  

    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      working-directory: ziv-app

    - name: Download task definition
      env:
        CONTAINER_NAME : ${{ env.CONTAINER_NAME }}
      run: |
        aws ecs describe-task-definition --task-definition $CONTAINER_NAME --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
