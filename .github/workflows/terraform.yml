# This workflow will build  infrastructure required to host containers in ECS

name: 'Deploy ECS infrastructure'

# Trigger workflow only if there are changes pushed to path or on manual dispatch
on:
  push:
    branches: [ "master" ]
    paths: 
     - "terraform/**" 
  workflow_dispatch:
    inputs:
      initial_run:
        description: 'Terraform initial run'
        required: false
        type: boolean

permissions:
  contents: read
  actions: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Github PAT token required to push environment variables using Terraform 
    env:
     GITHUB_TOKEN: ${{ secrets.GT_TOKEN }}

      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Configure AWS credentials to use for Job 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
    
    # Setup config to access remote S3 backend 
    - name: Setup Terraform Backend
      env:
        BUCKET_NAME: ${{ vars.BUCKET_NAME }}
        DYNAMODB_NAME: ${{ vars.DYNAMODB_NAME }}
      run: |
        cat > backend.tf << EOF
        terraform {
          backend "s3" {
            bucket         = "$BUCKET_NAME"
            key            = "terraform.tfstate"
            region         = "ap-south-1"
            dynamodb_table = "$DYNAMODB_NAME"
          }
         }
        EOF

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Validate Terraform code to make sure there are no errors 
    - name: Terraform validate
      run: terraform validate 

    # Generates an execution plan for Terraform and outputs exitcode depending on if there are changes in plan or not 
    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -detailed-exitcode -out terraplan 

    # Build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      if: github.ref == 'refs/heads/master' && steps.plan.outputs.exitcode == 2 # Execute only in case there are changes 
      run: terraform apply -auto-approve terraplan 

  dispatch:
     name: 'Dispatch ECS event'
     runs-on: ubuntu-latest
     needs: [terraform]
     defaults:
      run:
        shell: bash
     steps:
      - name: Invoke workflow with inputs
        uses: benc-uk/workflow-dispatch@v1
        if: ${{ inputs.initial_run }}
        with:
         workflow: aws.yml





    


